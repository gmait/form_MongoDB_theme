<%- include('header'); -%>

 
  <div class="container">
    <h3 class="text-center pt-3 display-5"><%= title %></h3>

  <hr style="color: aqua;">
   
<h4>As I am also just learning about Web Technology, what I have penned here is only my experience while building this project.</h4> 
<p>  
</p><p>
1. **In this project, I learnt to implement mongoDB with Docker to collect data from a query form. My form has a select field, name, email, an optional field, phone and a message field.
</p><p>
2. If you are interested to try out MongoDB, you can try out the free Community Server Download - **MongoDB community download :** https://wwww.mongodb.com/try/download/community , 
</p><p>
3. **I had used Docker in this project ** 
</p><p>
4. <strong>**What is special about MongoDB?:**</strong> As this is the 2nd database engine I have learnt to connect to a form to collect persistent data, MongoDB had functioned differently compared with SQLite when used with the Mongoose driver. I feel comfortable with an object-oriented approach.
</p><p>
5. **Mongoose** - so you will need to npm install mongoose to use it.
</p><p>
6. **A Model :** So I started with building a model, in this project, it is the same as one table. I defined the attributes and datatypes. Once this model is created, we can now treat it like an object. 
So is a new query, we can treat it as an object, so you will be using "new" here.
</p><p>
7. **Learn more about mongoDB here:** https://www.mongodb.com/docs/manual/tutorial/
</p><p>
8. **Use Express Routes to GET and POST requests:** 
</p><p>
9. <strong>**Remember to validate input data, it is very important to prevent injection attacks or malformed queries.</strong> I have used the express-validator. 
</p><p>
10.<strong>**Apparently, the new version does not use callback function anymore. So I use lots of try - catch, await and Promise (I have yet used this).
</p><p>
</p>
Last Updated: 7 June 2024



<hr style="color: aqua;">
    </div>


  <%- include('footer'); -%>